%% LaBGAS_2_spm_fit_firstlvl_models
%
% This script runs first level analysis from 
% a CANlab style first level DSGN structure array and
% CANlab/spm style onset/duration and noise regressor files 
% using CANlab's canlab_glm_subject_levels function
%
% See canlab_glm_single_subject('dsgninfo'), or documentation in 
% Github\CanlabCore\CanlabCore\GLM_Batch_tools for details on first level
% analysis using CANlab tools
%
% This script is adapted by @lukasvo76 from the script
% 1) 2_spm_fit_single_trial_models.m by @bogpetre on Google Drive\CANlab\
% CANLAB Lab Member Documents\GLM_batch_tools\bogdan_paingen
% 2) MPA2_set_design_model1_blanca.m by @martaceko on
% Google Drive\CANlab\CANLAB Lab Member Documents\GLM_batch_tools\
% Marta_MPA2\MPA2code_1stlevel\Code
% contact @lukasvo76 if you need those original scripts
%
% DEPENDENCIES ON YOUR MATLAB PATH - SEE SETTINGS BELOW
% a) SPM12
% b) CANlab tools cloned from Github (see canlab.github.io)
% c) LaBGAS Github folder for your project cloned (see github.com/labgas),
% particularly including the function LaBGAS_get_firstlvl_dsgn_obj() called
% by this script
% 
% INPUTS 
% 1. DSGN structure array generated by the function 
% LaBGAS_get_firstlvl_dsgn_obj called from this script
%
% OUTPUT
% 1. estimated first level models in DSGN.modeldir
% 2. a directory and settings for diagnostics obtained by calling
% LaBGAS_3_spm_diagnose_firstlvl_models.m
%
% analysis_method
% 'classic'
% classic SPM first level GLM design with one regressor per condition per
% run
% 'classic_pmods'
% same as classic but including parametric modulators
% 'single_trial'
% single trial first level GLM design with one regressor per trial for
% conditions specific in DSGN.singletrials in
% LaBGAS_get_single_trial_dsgn_obj.m
%__________________________________________________________________________
%
% authors: 
% lukas.van.oudenhove@dartmouth.edu, lukas.vanoudenhove@kuleuven.be
% bogdan.petre@dartmouth.edu,
% marta.ceko@colorado.edu
%
% date:   October, 2020
%
%__________________________________________________________________________
% @(#)% LaBGAS_2_spm_fit_firstlvl_models.m         v1.2        
% last modified: 2021/02/11
%
%% settings
% addpath(genpath('C:\Users\lukas\Documents\GitHub\CanlabCore')); % add relevant CANlab tools folders and spm to Matlab path if they are not there yet - I have saved them on my Matlab path permanently hence do not need this
% addpath(genpath('C:\Users\lukas\Documents\GitHub\CanlabPrivate'));
% addpath(genpath('C:\Users\lukas\Documents\MATLAB\spm12'));
addpath(genpath('C:\Users\lukas\Documents\GitHub\proj-emosymp')); % add our local path to the LaBGAS Github repo for this project

analysis_method = 'single_trial';

%% call function to create DSGN structure array
switch analysis_method
    case 'classic'
        DSGN = LaBGAS_get_firstlvl_dsgn_obj();
    case 'classic_pmods'
        DSGN = LaBGAS_get_firstlvl_dsgn_obj_pmods();
    case 'single_trial'
        DSGN = LaBGAS_get_single_trial_dsgn_obj();
    otherwise
        error('invalid analysis_method option, correct in settings');
end

%% code to run analysis and diagnostics, and publish report
sid = dir([DSGN.modeldir,'\sub-*']);
for i = 1:size(DSGN.subjects,2) % iter over subj

%% fit first levels
fprintf('Running on subject directory %s\n',DSGN.subjects{i});
canlab_glm_subject_levels(DSGN,'subjects',DSGN.subjects(i));

%% setup for diagnosis
logDir=[DSGN.modeldir, '\', sid(i).name, '\diagnostics'];
mkdir(logDir);

p = struct('useNewFigure', false, 'maxHeight', 800, 'maxWidth', 1600, ...
    'format', 'html', 'outputDir', logDir, ...
    'showCode', true);

%% run diagnosis by calling LaBGAS_3_spm_diagnose_firstlvl_models.m
publish('LaBGAS_3_spm_diagnose_firstlvl_models.m',p)
end